// Code generated by genji.
// DO NOT EDIT!

package model

import (
	"errors"

	"github.com/asdine/genji/field"
	"github.com/asdine/genji/index"
	"github.com/asdine/genji/query"
	"github.com/asdine/genji/record"
)

// GetField implements the field method of the record.Record interface.
func (a *Account) GetField(name string) (field.Field, error) {
	switch name {
	case "ID":
		return field.NewUint32("ID", a.ID), nil
	case "Username":
		return field.NewString("Username", a.Username), nil
	case "Password":
		return field.NewBytes("Password", a.Password), nil
	}

	return field.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (a *Account) Iterate(fn func(field.Field) error) error {
	var err error

	err = fn(field.NewUint32("ID", a.ID))
	if err != nil {
		return err
	}

	err = fn(field.NewString("Username", a.Username))
	if err != nil {
		return err
	}

	err = fn(field.NewBytes("Password", a.Password))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (a *Account) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f field.Field) error {
		var err error

		switch f.Name {
		case "ID":
			a.ID, err = field.DecodeUint32(f.Data)
		case "Username":
			a.Username, err = field.DecodeString(f.Data)
		case "Password":
			a.Password, err = field.DecodeBytes(f.Data)
		}
		return err
	})
}

// PrimaryKey returns the primary key. It implements the table.PrimaryKeyer interface.
func (a *Account) PrimaryKey() ([]byte, error) {
	return field.EncodeUint32(a.ID), nil
}

// Indexes creates a map containing the configuration for each index of the table.
func (a *Account) Indexes() map[string]index.Options {
	return map[string]index.Options{
		"Username": index.Options{Unique: true},
	}
}

// AccountFields describes the fields of the Account record.
// It can be used to select fields during queries.
type AccountFields struct {
	ID       query.Uint32FieldSelector
	Username query.StringFieldSelector
	Password query.BytesFieldSelector
}

// NewAccountFields creates a AccountFields.
func NewAccountFields() *AccountFields {
	return &AccountFields{
		ID:       query.Uint32Field("ID"),
		Username: query.StringField("Username"),
		Password: query.BytesField("Password"),
	}
}
