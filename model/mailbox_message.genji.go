// Code generated by genji.
// DO NOT EDIT!

package model

import (
	"errors"

	"github.com/asdine/genji/field"
	"github.com/asdine/genji/index"
	"github.com/asdine/genji/query"
	"github.com/asdine/genji/record"
)

// GetField implements the field method of the record.Record interface.
func (m *MailboxMessage) GetField(name string) (field.Field, error) {
	switch name {
	case "MailboxID":
		return field.NewString("MailboxID", m.MailboxID), nil
	case "MessageID":
		return field.NewUint32("MessageID", m.MessageID), nil
	}

	return field.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (m *MailboxMessage) Iterate(fn func(field.Field) error) error {
	var err error

	err = fn(field.NewString("MailboxID", m.MailboxID))
	if err != nil {
		return err
	}

	err = fn(field.NewUint32("MessageID", m.MessageID))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (m *MailboxMessage) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f field.Field) error {
		var err error

		switch f.Name {
		case "MailboxID":
			m.MailboxID, err = field.DecodeString(f.Data)
		case "MessageID":
			m.MessageID, err = field.DecodeUint32(f.Data)
		}
		return err
	})
}

// Indexes creates a map containing the configuration for each index of the table.
func (m *MailboxMessage) Indexes() map[string]index.Options {
	return map[string]index.Options{
		"MailboxID": index.Options{Unique: false},
		"MessageID": index.Options{Unique: false},
	}
}

// MailboxMessageFields describes the fields of the MailboxMessage record.
// It can be used to select fields during queries.
type MailboxMessageFields struct {
	MailboxID query.StringFieldSelector
	MessageID query.Uint32FieldSelector
}

// NewMailboxMessageFields creates a MailboxMessageFields.
func NewMailboxMessageFields() *MailboxMessageFields {
	return &MailboxMessageFields{
		MailboxID: query.StringField("MailboxID"),
		MessageID: query.Uint32Field("MessageID"),
	}
}
