// Code generated by genji.
// DO NOT EDIT!

package model

import (
	"errors"

	"github.com/asdine/genji/field"
	"github.com/asdine/genji/index"
	"github.com/asdine/genji/query"
	"github.com/asdine/genji/record"
)

// GetField implements the field method of the record.Record interface.
func (m *Mailbox) GetField(name string) (field.Field, error) {
	switch name {
	case "ID":
		return field.NewString("ID", m.ID), nil
	case "Name":
		return field.NewString("Name", m.Name), nil
	}

	return field.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (m *Mailbox) Iterate(fn func(field.Field) error) error {
	var err error

	err = fn(field.NewString("ID", m.ID))
	if err != nil {
		return err
	}

	err = fn(field.NewString("Name", m.Name))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (m *Mailbox) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f field.Field) error {
		var err error

		switch f.Name {
		case "ID":
			m.ID, err = field.DecodeString(f.Data)
		case "Name":
			m.Name, err = field.DecodeString(f.Data)
		}
		return err
	})
}

// PrimaryKey returns the primary key. It implements the table.PrimaryKeyer interface.
func (m *Mailbox) PrimaryKey() ([]byte, error) {
	return field.EncodeString(m.ID), nil
}

// Indexes creates a map containing the configuration for each index of the table.
func (m *Mailbox) Indexes() map[string]index.Options {
	return map[string]index.Options{
		"Name": index.Options{Unique: false},
	}
}

// MailboxFields describes the fields of the Mailbox record.
// It can be used to select fields during queries.
type MailboxFields struct {
	ID   query.StringFieldSelector
	Name query.StringFieldSelector
}

// NewMailboxFields creates a MailboxFields.
func NewMailboxFields() *MailboxFields {
	return &MailboxFields{
		ID:   query.StringField("ID"),
		Name: query.StringField("Name"),
	}
}
