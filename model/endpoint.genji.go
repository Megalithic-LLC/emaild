// Code generated by genji.
// DO NOT EDIT!

package model

import (
	"errors"

	"github.com/asdine/genji/field"
	"github.com/asdine/genji/query"
	"github.com/asdine/genji/record"
)

// GetField implements the field method of the record.Record interface.
func (e *Endpoint) GetField(name string) (field.Field, error) {
	switch name {
	case "Id":
		return field.NewString("Id", e.Id), nil
	case "ServiceInstanceId":
		return field.NewString("ServiceInstanceId", e.ServiceInstanceId), nil
	case "Protocol":
		return field.NewString("Protocol", e.Protocol), nil
	case "Type":
		return field.NewString("Type", e.Type), nil
	case "Port":
		return field.NewUint16("Port", e.Port), nil
	case "Path":
		return field.NewString("Path", e.Path), nil
	case "Enabled":
		return field.NewBool("Enabled", e.Enabled), nil
	}

	return field.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (e *Endpoint) Iterate(fn func(field.Field) error) error {
	var err error

	err = fn(field.NewString("Id", e.Id))
	if err != nil {
		return err
	}

	err = fn(field.NewString("ServiceInstanceId", e.ServiceInstanceId))
	if err != nil {
		return err
	}

	err = fn(field.NewString("Protocol", e.Protocol))
	if err != nil {
		return err
	}

	err = fn(field.NewString("Type", e.Type))
	if err != nil {
		return err
	}

	err = fn(field.NewUint16("Port", e.Port))
	if err != nil {
		return err
	}

	err = fn(field.NewString("Path", e.Path))
	if err != nil {
		return err
	}

	err = fn(field.NewBool("Enabled", e.Enabled))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (e *Endpoint) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f field.Field) error {
		var err error

		switch f.Name {
		case "Id":
			e.Id, err = field.DecodeString(f.Data)
		case "ServiceInstanceId":
			e.ServiceInstanceId, err = field.DecodeString(f.Data)
		case "Protocol":
			e.Protocol, err = field.DecodeString(f.Data)
		case "Type":
			e.Type, err = field.DecodeString(f.Data)
		case "Port":
			e.Port, err = field.DecodeUint16(f.Data)
		case "Path":
			e.Path, err = field.DecodeString(f.Data)
		case "Enabled":
			e.Enabled, err = field.DecodeBool(f.Data)
		}
		return err
	})
}

// PrimaryKey returns the primary key. It implements the table.PrimaryKeyer interface.
func (e *Endpoint) PrimaryKey() ([]byte, error) {
	return field.EncodeString(e.Id), nil
}

// EndpointFields describes the fields of the Endpoint record.
// It can be used to select fields during queries.
type EndpointFields struct {
	Id                query.StringFieldSelector
	ServiceInstanceId query.StringFieldSelector
	Protocol          query.StringFieldSelector
	Type              query.StringFieldSelector
	Port              query.Uint16FieldSelector
	Path              query.StringFieldSelector
	Enabled           query.BoolFieldSelector
}

// NewEndpointFields creates a EndpointFields.
func NewEndpointFields() *EndpointFields {
	return &EndpointFields{
		Id:                query.StringField("Id"),
		ServiceInstanceId: query.StringField("ServiceInstanceId"),
		Protocol:          query.StringField("Protocol"),
		Type:              query.StringField("Type"),
		Port:              query.Uint16Field("Port"),
		Path:              query.StringField("Path"),
		Enabled:           query.BoolField("Enabled"),
	}
}
